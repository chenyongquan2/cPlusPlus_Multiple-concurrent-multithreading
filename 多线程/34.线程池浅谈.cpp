二、浅谈线程池：
场景设想：服务器程序， 每来一个客户端，就创建一个新线程为这个客户提供服务。

问题：

1、2万个玩家，不可能给每个玩家创建一个新线程，此程序写法在这种场景下不通。

2、程序稳定性问题：编写代码中，偶尔/“时不时地突然”创建一个线程，这种写法，一般情况下不会出错，但是不稳定的
(带病工作 有隐患 写起来没有底)；

线程池：把一堆线程弄到一起，统一管理。这种统一管理调度，循环利用的方式，就叫做线程池。

实现方式：程序启动时，一次性创建好一定数量的线程(根据业务需要)。这种方式让人更放心，觉得程序代码更稳定。

三、线程创建数量谈：

1、线程创建的数量极限的问题

一般来讲，2000个线程基本就是极限；再创建就会崩溃。

2、线程创建数量建议

a、采用某些技术开发程序提供的建议，接口提供商建议你 创建线程数量=cpu数量,eg:cpu *2,cpu*2+2,
遵照建议和指示来确保程序高效执行。

b、创建多线程完成业务；一个线程等于一条执行通路，
考虑可能被阻塞的线程数量，创建多余最大被阻塞线程数量的线程，如100个线程被阻塞再充值业务，开110个线程就是很合适的
(还有10个可以为非充值的用户提供服务。)
c、线程创建数量尽量不要超过500个，尽量控制在200个之内；
(因为线程切换有开销的，如果线程数量为1800，那么cpu要为这个1800个线程都提供服务，得大量切换
(切换需要保存上下文以及恢复上下文，切换开销占用了大量的时间，时间片（时间总和(固定)/线程数）留个这个线程真正干活的时间就少了))

  
四.多线程开发总结：
  window Linux 平台下有各自的多线程的开发接口/开发库，是比较成熟稳定的，但这些多线程接口是跟具体的操作系统有关系的，
  很难做到跨平台，window写的代码很难在linux平台下用。
  c++11从语言层面上，引入了多线程开发接口，实现了跨平台的接口(window linux都可用，window写的代码可以直接拿过去linux用)
  但是c++11标准的线程本身的能力还是不够强大。(后续希望越来越强大)
